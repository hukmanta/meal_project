import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
import 'package:meal_project/infrastructure/local_db/table_categories.dart';
import 'package:meal_project/infrastructure/local_db/table_meal_detail.dart';

part 'database.g.dart';

@DriftDatabase(tables: [TableCategories, TableMealDetail])
class Database extends _$Database {
  Database() : super(_openConnection());

  @override
  int get schemaVersion => 3;

  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onCreate: (m) async {
        await m.createAll();
      },
    );
  }

  // The TableMealDetail class has been generated by drift, based on the
  //
  // In drift, queries can be watched by using .watch() in the end.
  // For more information on queries, see https://drift.simonbinder.eu/docs/getting-started/writing_queries/
  //Future<List<TableMealDetailData>> get allItemsMealDetail => select(tableMealDetail).get();

  Future<List<TableMealDetailData>> itemsMealDetailById(int id) => (select(tableMealDetail)..where((tbl) => tbl.mealId.equals(id))).get();

  Future updateMealDetailById(TableMealDetailData data) =>
      (update(tableMealDetail)..where((tbl) => tbl.mealId.equals(data.mealId))).write(TableMealDetailCompanion(
          mealId: Value(data.mealId),
          strMeal: Value(data.strMeal),
          strDrinkAlternate: Value(data.strDrinkAlternate),
          strCategory: Value(data.strCategory),
          strArea: Value(data.strArea),
          strInstructions: Value(data.strInstructions),
          strMealThumb: Value(data.strMealThumb),
          strTags: Value(data.strTags),
          strYoutube: Value(data.strYoutube),
          strCreativeCommonsConfirmed: Value(data.strCreativeCommonsConfirmed),
          strImageSource: Value(data.strImageSource),
          strSource: Value(data.strSource),
          strIngredient1: Value(data.strIngredient1),
          strIngredient2: Value(data.strIngredient2),
          strIngredient3: Value(data.strIngredient3),
          strIngredient4: Value(data.strIngredient4),
          strIngredient5: Value(data.strIngredient5),
          strIngredient6: Value(data.strIngredient6),
          strIngredient7: Value(data.strIngredient7),
          strIngredient8: Value(data.strIngredient8),
          strIngredient9: Value(data.strIngredient9),
          strIngredient10: Value(data.strIngredient10),
          strIngredient11: Value(data.strIngredient11),
          strIngredient12: Value(data.strIngredient12),
          strIngredient13: Value(data.strIngredient13),
          strIngredient14: Value(data.strIngredient14),
          strIngredient15: Value(data.strIngredient15),
          strIngredient16: Value(data.strIngredient16),
          strIngredient17: Value(data.strIngredient17),
          strIngredient18: Value(data.strIngredient18),
          strIngredient19: Value(data.strIngredient19),
          strIngredient20: Value(data.strIngredient20),
          strMeasure1: Value(data.strMeasure1),
          strMeasure2: Value(data.strMeasure2),
          strMeasure3: Value(data.strMeasure3),
          strMeasure4: Value(data.strMeasure4),
          strMeasure5: Value(data.strMeasure5),
          strMeasure6: Value(data.strMeasure6),
          strMeasure7: Value(data.strMeasure7),
          strMeasure8: Value(data.strMeasure8),
          strMeasure9: Value(data.strMeasure9),
          strMeasure10: Value(data.strMeasure10),
          strMeasure11: Value(data.strMeasure11),
          strMeasure12: Value(data.strMeasure12),
          strMeasure13: Value(data.strMeasure13),
          strMeasure14: Value(data.strMeasure14),
          strMeasure15: Value(data.strMeasure15),
          strMeasure16: Value(data.strMeasure16),
          strMeasure17: Value(data.strMeasure17),
          strMeasure18: Value(data.strMeasure18),
          strMeasure19: Value(data.strMeasure19),
          strMeasure20: Value(data.strMeasure20),
          isFavorite: Value(data.isFavorite)));

  Future<List<TableCategory>> get allItemsCategory => select(tableCategories).get();

  Future<List<TableMealDetailData>> allItemsMealByCategory(String category) =>
      (select(tableMealDetail)..where((tbl) => tbl.strCategory.equals(category))).get();
}

LazyDatabase _openConnection() {
  // the LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    // put the database file, called db.sqlite here, into the documents folder
    // for your app.
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase(file);
  });
}